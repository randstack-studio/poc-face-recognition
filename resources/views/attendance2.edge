<!DOCTYPE html>
<html>

<head>
  <title>Login</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.2/font/bootstrap-icons.css"
    integrity="sha384-b6lVK+yci+bfDmaY1u0zE8YYJt0TZxLEAFyYSLHId4xoVvsrQu3INevFKo+Xir8e" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous">
  </script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.1.3/socket.io.js"></script>
  <style>
    .menu-container {
      display: flex;
      justify-content: center;


    }

    .menu-container .menu {
      max-width: 1185px;
      width: 100%;
    }

    .box {
      background-color: #FFFFFF;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);

    }

    .box-title {
      font-family: 'Poppins', sans-serif;
      font-style: normal;
      font-weight: bold;
      font-size: 16px;
      line-height: 24px;
      color: #000000;
      margin-bottom: 0px;
    }

    .box-description {
      font-family: 'Poppins', sans-serif;
      font-style: normal;
      font-weight: normal;
      font-size: 14px;
      line-height: 21px;
      color: #757373;
      margin-bottom: 0px;
    }

    .save:disabled {
      background-color: #F15921;
      border: transparent;
      color: white;
      padding: 10px 15px;
      width: 150px;
      border-radius: 10px;
      opacity: 0.5;
      cursor: not-allowed;
    }

    .hidden {
      display: none !important;
    }
  </style>
</head>

<body>
  <div class="menu-container">
    <!-- <Navbar /> -->
    <div class="menu">
      <div class="modal fade" id="submittedModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="exampleModalLabel">Validasi Wajah</h5>
              <button type="button" class="btn-close hidden" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div id="validate_loading"
                style="display: flex; justify-content:center; flex-direction:column; align-items:center; gap:3px;">
                <div class="spinner-border text-primary" role="status">
                  <span class="visually-hidden">Loading...</span>

                </div>
                <p>Sedang melakukan validasi...</p>
              </div>
              <div class="hidden" id="box_validated_face">
                <img id="validated_face" style="width:100%;" />
              </div>
            </div>
            <div class="modal-footer hidden" id="modal_footer">
              {{-- <button type="button" class="btn btn-secondary hidden" data-bs-dismiss="modal">Close</button> --}}
              <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Ok!</button>
            </div>
          </div>
        </div>
      </div>
      <div style="margin-top:20px;margin-bottom:20px; ">
        <div
          style="background-color:#F15921; color:white; padding:20px 10px; border-radius:10px; display:flex; align-items:center; gap:10px;">
          {{-- BACK BUTTON --}}
          <div style="cursor:pointer;" onclick="window.location.href = '/menu'">
            <i class="bi bi-arrow-left"></i>
          </div>

          <p class="txt txt-16 txt-lh-18 txt-cl-turqoise bold mb-0" style="font-size:20px; font-weight:bold;">
            Absensi Wajah
          </p>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <div class="box" style="display:flex; flex-direction: column; justify-content:center;">
            <div class="row">
              <div class="col-md-6" id="box-video">
                <video id="video" style="width:100%;" autoplay></video>
              </div>
              <div class="col-md-6 hidden" id="box-capture">
                <h4>Tangkapan</h4>
                <img id="captured" style="width:100%;" />
              </div>

              <div class="col-md-6">
                <h4 class="hidden" id="title_source">Sumber Data</h4>
                <img id="source" style="width:100%;" />
                {{-- <img src="/empty.jpeg" id="empty" style="max-width:100%; height: 380px;" /> --}}
              </div>
            </div>
            <div class="row">
              <div class="col-md-12"
                style="display:flex; flex-direction: column; justify-content:center; align-items:center;">
                <div class="action" style="margin-top:30px; display:flex; gap:10px;">
                  {{-- timer to capture --}}
                  <div class="timer-box" style="text-align: center;" id="timer_box">
                    <p>Focus to camera</p>
                    <p style="font-weight:20px; font-size:30px;" id="timer">5</p>
                  </div>
                  <div class="face-match-box hidden" style="text-align: center;" id="face_match_box">
                    <p style="font-weight:20px; font-size:30px;" id="face_match_result"></p>
                    <button class="hidden" id="reset_button" onclick="reset()"
                      style="background-color:#F15921; border:transparent; color:white; padding:10px 15px; width: 150px; border-radius:10px;">Coba
                      Lagi
                    </button>
                  </div>


                </div>
              </div>
            </div>

          </div>
        </div>
      </div>
    </div>
  </div>
  <script>
    let mediaStream = null;
    let capturedFrame = null;
    let captured = document.getElementById('captured');
    let timer = document.getElementById('timer');
    let timerBox = document.getElementById('timer_box');
    let titleSource = document.getElementById('title_source');
    let resetButton = document.getElementById('reset_button');
    let faceMatchResult = document.getElementById('face_match_result');
    let faceMatchBox = document.getElementById('face_match_box');
    let source = document.getElementById('source');
    let videoElement = document.getElementById('video');
    let boxCapture = document.getElementById('box-capture');
    let boxVideo = document.getElementById('box-video');
    let validatedFace = document.getElementById('validated_face');
    let boxValidatedFace = document.getElementById('box_validated_face');
    let validateLoading = document.getElementById('validate_loading');
    let modalFooter = document.getElementById('modal_footer');
    const save = document.querySelector('.save');
    const galleryModal = new bootstrap.Modal(document.getElementById('submittedModal'), {
      keyboard: false,
      backdrop: 'static'
    });
    const socket = io("http://127.0.0.1:8086", {
      transports: ["websocket"], // Use WebSocket transport
      withCredentials: true,
    });
    // const socket = io("lens.staging.endavolabs.com", {
    //   transports: ["polling"], // Use WebSocket transport
    //   withCredentials: true,
    // });

    function startTimer(){

      let count = 5;
      let interval = setInterval(() => {
        count--;
        timer.innerHTML = count;
        if(count == 0){
          clearInterval(interval);
          timerBox.classList.add('hidden');
          capture();
        }
      }, 1000);
    }
    socket.on('result', (data) => {
      if(data.success){
        captured.src = "/" + data.result.absent;
        source.src = "/" + data.result.source;
        titleSource.classList.remove('hidden');
        galleryModal.hide();
      }else{
        resetButton.classList.remove('hidden');
        setTimeout(() => {
          galleryModal.hide();
        }, 2000)
      }

      faceMatchBox.classList.remove('hidden');
      faceMatchResult.innerHTML = data.message;
    })
    async function stream(){
      try {
        const captured = document.getElementById('captured');
        const liststream = await navigator.mediaDevices.enumerateDevices();
        const videoInput = liststream.filter((device) => {
          return device.kind == "videoinput" && device.deviceId == "default";
        })
        mediaStream = await navigator.mediaDevices.getUserMedia({ video: {deviceId: {exact: videoInput.deviceId}} })
        videoElement.srcObject = mediaStream;
        startTimer()
      } catch (error) {
        console.log(error)
      }

// videoElement.srcObject = mediaStream;
    }

    function reset(){
      captured.src = "";
      source.src = "";
      titleSource.classList.add('hidden');
      resetButton.classList.add('hidden');
      faceMatchBox.classList.add('hidden');
      boxCapture.classList.add('hidden');
      boxVideo.classList.remove('hidden');
      galleryModal.hide();
      // validateLoading.classList.remove('hidden');
      boxValidatedFace.classList.add('hidden');
      modalFooter.classList.add('hidden');
      timer.classList.remove('hidden');
      timer.innerHTML = 5;
      timerBox.classList.remove('hidden');
      startTimer();
    }

    async function capture(){
      const empty = document.getElementById('empty');
      const track = mediaStream.getVideoTracks()[0];
      const imageCapture = new ImageCapture(track);
      capturedFrame = await imageCapture.takePhoto();
      captured.src = URL.createObjectURL(capturedFrame);
      boxCapture.classList.remove('hidden');
      boxVideo.classList.add('hidden');
      galleryModal.show();
      const blob = capturedFrame.slice(0, capturedFrame.size, 'image/png'); // Adjust the format if needed
      const capturedFile = new File([blob], 'captured_image.png', { type: 'image/png' });
      const user_id = {{user_id}};
      socket.emit('capturedImage', {file: capturedFile, user_id:user_id });
    }

    async function validate(){

    }

    async function submit(user_id){
      // Convert the captured frame Blob to a File object
      const blob = capturedFrame.slice(0, capturedFrame.size, 'image/png'); // Adjust the format if needed
      const capturedFile = new File([blob], 'captured_image.png', { type: 'image/png' });
      socket.emit('addFace', {capturedFile, user_id});
      galleryModal.show();
    }
    stream();
    // startTimer();
  </script>
</body>

</html>
