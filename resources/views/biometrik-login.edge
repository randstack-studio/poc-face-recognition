<!DOCTYPE html>
<html>

<head>
  <title>Login</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous">
  </script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.1.3/socket.io.js"></script>
  <style>
    .auth-section-logo {
      background-color: #006480;
      padding: 0;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .image-container {
      width: 100%;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .auth-section-form {
      padding: 0;
      height: 100vh;
      display: flex;
      gap: 80px;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }

    .hidden {
      display: none !important;
    }

    #overlay {
      position: absolute;
      top: 0px;
      left: 0px;
      -o-transform: scaleX(-1);
      -webkit-transform: scaleX(-1);
      transform: scaleX(-1);
      -ms-filter: fliph;
      /*IE*/
      filter: fliph;
      /*IE*/


    }

    #videoel {
      -o-transform: scaleX(-1);
      -webkit-transform: scaleX(-1);
      transform: scaleX(-1);
      -ms-filter: fliph;
      /*IE*/
      filter: fliph;
      /*IE*/


    }

    #container {
      position: relative;
      width: 370px;
      /*margin : 0px auto;*/
    }

    #content {
      margin-top: 50px;
      margin-left: auto;
      margin-right: auto;
      max-width: 600px;
    }

    h2 {
      font-weight: 400;
    }

    .btn {
      font-family: 'Lato';
      font-size: 16px;
    }

    #controls {
      text-align: center;
    }

    #emotion_container {
      width: 600px;
    }

    #emotion_icons {
      height: 50px;
      padding-left: 40px;
    }

    .emotion_icon {
      width: 40px;
      height: 40px;
      margin-top: 5px;
      /*margin-left : 13px;*/
      margin-left: 35px;
    }

    #emotion_chart,
    #emotion_icons {
      margin: 0 auto;
      width: 400px;
    }

    #icon1,
    #icon2,
    #icon3,
    #icon4,
    #icon5,
    #icon6 {
      visibility: hidden;
    }

    /* d3 */
    .bar {
      fill: steelblue;
      fill-opacity: .9;
    }

    .chart {
      display: flex;
      width: 300px;
      height: 200px;
      background-color: #f0f0f0;
      border-radius: 10px;
      /* Membuat sudut menjadi bulat */
      overflow: hidden;
      /* Mengatasi overflow jika bar terlalu tinggi */
    }

    .bar {
      flex: 1;
      background-color: #0074d9;
      border-radius: 10px 10px 0 0;
      /* Membuat sudut atas menjadi bulat */
      margin: 0 2px;
      /* Jarak antara setiap bar */
    }
  </style>
  {{--
  <link rel="stylesheet" href="style.css"> --}}
</head>

<body>
  <div class="login-container">
    <form method="POST" action="/biometric-login" style="width: 50%;" id="form">
      {{ csrfField() }}
      <div class="form-input no-border" style="margin-bottom: 20px;">
        <input name="email" id="email" type="hidden" class="w-100" />
      </div>
    </form>
    <div class="modal fade" id="submittedModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="exampleModalLabel">Biometric Login</h5>
            <button type="button" class="btn-close hidden" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div id="validate_loading"
              style="display: flex; justify-content:center; flex-direction:column; align-items:center; gap:3px;">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>

              </div>
              <p>Sedang melakukan validasi...</p>
            </div>
            <div class="hidden" id="box_validated_face">
              <img id="validated_face" style="width:100%;" />
            </div>
          </div>
          <div class="modal-footer hidden" id="modal_footer">
            {{-- <button type="button" class="btn btn-secondary hidden" data-bs-dismiss="modal">Close</button> --}}
            <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Ok!</button>
          </div>
        </div>
      </div>
    </div>
    <div class="col-md-12 col-xs-8">
      <div class="row">
        <div class="col-md-6 col-xs-12 container-form">
          <div class="auth-section-form">
            <div style="width: 100%; text-align: center" class="bni_logo">
              <h2 style="color:#F7931D; "> BNI LIFE LENS SYSTEM</h2>
              {{-- <img style="width: 250px" src="/trivia.png" alt="logo" /> --}}
              {{-- <img style="width: 250px; display: none" src="~/assets/icon/trivia_bc_meta.jpg" alt="logo" /> --}}
            </div>
            <div class="title" style="text-align: center">
              <h3 class="txt-30 txt-lh-45 title-std bold">
                Biometric Login User
              </h3>
            </div>
            <div class="row">
              <div class="col-md-12">
                <div class="box" style="display:flex; flex-direction: column; justify-content:center;">
                  <div class="row">
                    <div class="col-md-12" style="width: 100%; display:flex; justify-content:center;">
                      <div id="container" style="padding:0;">
                        <video id="videoel" width="400" height="300" preload="auto" loop playsinline autoplay></video>
                        <canvas id="overlay" width="400" height="300"></canvas>
                      </div>
                    </div>
                    <div class="col-md-12 hidden" style="width: 100%; display:flex; justify-content:center;"
                      id="box-capture">
                      <img id="captured" style="width:400px;" />
                    </div>
                  </div>
                  <div class="row">
                    <div class="col-md-12"
                      style="display:flex; flex-direction: column; justify-content:center; align-items:center;">
                      <div class="action" style="margin-top:30px; display:flex; gap:10px;">
                        {{-- timer to capture --}}
                        <div class="instruction-box">
                          <p id="instruction"></p>
                        </div>

                        <div class="timer-box" style="text-align: center;" id="timer_box">
                          <p>Focus to camera</p>
                          <p style="font-weight:20px; font-size:30px;" id="timer">3</p>
                        </div>
                        <div class="face-match-box hidden" style="text-align: center;" id="face_match_box">
                          <p style="font-weight:20px; font-size:30px;" id="face_match_result"></p>
                          <button class="hidden" id="reset_button" onclick="reset()"
                            style="background-color:#F15921; border:transparent; color:white; padding:10px 15px; width: 150px; border-radius:10px;">Coba
                            Lagi
                          </button>
                        </div>
                      </div>
                    </div>
                    <div class="col-md-12">
                      <div id='emotion_chart'></div>
                    </div>
                  </div>

                </div>
              </div>
            </div>

          </div>
        </div>
        <div class="col-md-6 auth-section-logo d-none d-md-block">
          <div class="image-container">
            <img src="/login_cover_center.png" alt="xxx" />
          </div>
        </div>

      </div>
    </div>
  </div>
  <script src="/js/utils.js"></script>
  <script src="/js/clmtrackr.js"></script>
  <script src="/js/model_pca_20_svm.js"></script>
  <script src="/js/stats.js"></script>
  <script src="/js/d3.min.js"></script>
  <script src="/js/emotion_classifier.js"></script>
  <script src="/js/emotionmodel.js"></script>
  <script>
    if('email' in localStorage == false){
      window.location.href = '/login';
    }

    let captured = document.getElementById('captured');
    let timer = document.getElementById('timer');
    let form = document.getElementById('form');
    let email = document.getElementById('email');
    let timerBox = document.getElementById('timer_box');
    let titleSource = document.getElementById('title_source');
    let resetButton = document.getElementById('reset_button');
    let faceMatchResult = document.getElementById('face_match_result');
    let faceMatchBox = document.getElementById('face_match_box');
    let source = document.getElementById('source');
    let videoElement = document.getElementById('video');
    let boxCapture = document.getElementById('box-capture');
    let boxVideo = document.getElementById('box-video');
    let validatedFace = document.getElementById('validated_face');
    let boxValidatedFace = document.getElementById('box_validated_face');
    let validateLoading = document.getElementById('validate_loading');
    let modalFooter = document.getElementById('modal_footer');
    let instruction = document.getElementById('instruction');
    var vid = document.getElementById('videoel');
    let container = document.getElementById('container');
    var vid_width = vid.width;
    var vid_height = vid.height;
    var overlay = document.getElementById('overlay');
    var overlayCC = overlay.getContext('2d');
    let mediaStream = null;
    let capturedDone = false;
    let maxParameter = (Math.floor(Math.random() * (9 - 8 + 1) + 8) / 10);
    let midParameter = (Math.floor(Math.random() * (6 - 5 + 1) + 5) / 10);
    let lowParameter = (Math.floor(Math.random() * (2 - 1 + 1) + 1) / 10);
    let lowParameterResult = false;
    let midParameterResult = false;
    let maxParameterResult = false;
    console.log(maxParameter);
    const galleryModal = new bootstrap.Modal(document.getElementById('submittedModal'), {
      keyboard: false,
      backdrop: 'static'
    });
    // const socket = io("http://127.0.0.1:8086", {
    //   transports: ["websocket"], // Use WebSocket transport
    //   withCredentials: true,
    // });

    const socket = io("lens.staging.endavolabs.com", {
      transports: ["polling"], // Use WebSocket transport
      withCredentials: true,
    });

    socket.on("biometricLoginResult", (response) => {
      if(response.success){
        email.value = response.result.email;
        form.submit();
      } else {
        validateLoading.classList.add('hidden');
        faceMatchBox.classList.remove('hidden');
        faceMatchResult.innerHTML = response.message;
        resetButton.classList.remove('hidden');
        galleryModal.hide();
      }
    });

//     async function stream(){
//       try {
//         const captured = document.getElementById('captured');
//         const liststream = await navigator.mediaDevices.enumerateDevices();
//         const videoInput = liststream.filter((device) => {
//           return device.kind == "videoinput" && device.deviceId == "default";
//         })
//         mediaStream = await navigator.mediaDevices.getUserMedia({ video: {deviceId: {exact: videoInput.deviceId}} })
//         videoElement.srcObject = mediaStream;
//         startTimer()
//       } catch (error) {
//         console.log(error)
//       }

// // videoElement.srcObject = mediaStream;
//     }

    function reset(){
      window.location.reload();
      // boxCapture.classList.add('hidden');
      // container.classList.remove('hidden');
      // faceMatchBox.classList.add('hidden');
      // resetButton.classList.add('hidden');
      // instruction.classList.add('hidden');
      // timer.innerHTML = 3;
      // timerBox.classList.remove('hidden');
      // capturedDone = false;
      // startTimer();
    }

    function startTimer(){
      let count = 3;
      let interval = setInterval(() => {
        count--;
        timer.innerHTML = count;
        if(count == 0){
          clearInterval(interval);
          timerBox.classList.add('hidden');
          startVideo();
          // capture();
        }
      }, 1000);
    }

//     function startVideo() {
//       // start video
//       vid.play();
//       // start tracking
//       ctrack.start(vid);
//       trackingStarted = true;
//       // start loop to draw face
//       drawLoop();
//     }

    async function capture(){
      const empty = document.getElementById('empty');
      const track = mediaStream.getVideoTracks()[0];
      const imageCapture = new ImageCapture(track);
      const currentEmail = localStorage.getItem('email');
      capturedFrame = await imageCapture.takePhoto();
      captured.src = URL.createObjectURL(capturedFrame);
      boxCapture.classList.remove('hidden');
      container.classList.add('hidden');
      instruction.classList.add('hidden');
      galleryModal.show();
      validateLoading.classList.remove('hidden');
      const blob = capturedFrame.slice(0, capturedFrame.size, 'image/png'); // Adjust the format if needed
      const capturedFile = new File([blob], 'captured_image.png', { type: 'image/png' });
      // const user_id = {{user_id}};
      socket.emit('biometricLogin', {capturedFile: capturedFile, email: currentEmail });
    }
//     stream()

				/********** check and set up video/webcam **********/

				function enablestart() {
					var startbutton = document.getElementById('startbutton');
					startbutton.value = "start";
					startbutton.disabled = null;
				}

				function adjustVideoProportions() {
					// resize overlay and video if proportions are different
					// keep same height, just change width
					var proportion = vid.videoWidth/vid.videoHeight;
					vid_width = Math.round(vid_height * proportion);
					vid.width = vid_width;
					overlay.width = vid_width;
				}

				function gumSuccess( stream ) {
          mediaStream = stream;
					// add camera stream if getUserMedia succeeded
          startTimer()
					if ("srcObject" in vid) {
						vid.srcObject = stream;
					} else {
						vid.src = (window.URL && window.URL.createObjectURL(stream));
					}
					vid.onloadedmetadata = function() {
						adjustVideoProportions();
						vid.play();
					}
					vid.onresize = function() {
						adjustVideoProportions();
						if (trackingStarted) {
							ctrack.stop();
							ctrack.reset();
							ctrack.start(vid);
						}
					}
				}

				function gumFail() {
					alert("There was some problem trying to fetch video from your webcam. If you have a webcam, please make sure to accept when the browser asks for access to your webcam.");
				}

				navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
				window.URL = window.URL || window.webkitURL || window.msURL || window.mozURL;

				// check for camerasupport
				if (navigator.mediaDevices) {
					navigator.mediaDevices.getUserMedia({video : true}).then(gumSuccess).catch(gumFail);
				} else if (navigator.getUserMedia) {
					navigator.getUserMedia({video : true}, gumSuccess, gumFail);
				} else {
					alert("This demo depends on getUserMedia, which your browser does not seem to support. :(");
				}

				vid.addEventListener('canplay', enablestart, false);

				/*********** setup of emotion detection *************/

				// set eigenvector 9 and 11 to not be regularized. This is to better detect motion of the eyebrows
				pModel.shapeModel.nonRegularizedVectors.push(9);
				pModel.shapeModel.nonRegularizedVectors.push(11);

				var ctrack = new clm.tracker({useWebGL : true});
				ctrack.init(pModel);
				var trackingStarted = false;

				function startVideo() {
					// start video
					vid.play();
					// start tracking
					ctrack.start(vid);
					trackingStarted = true;
					// start loop to draw face
					drawLoop();
				}

				function drawLoop() {
					requestAnimFrame(drawLoop);
					overlayCC.clearRect(0, 0, vid_width, vid_height);
					//psrElement.innerHTML = "score :" + ctrack.getScore().toFixed(4);
					if (ctrack.getCurrentPosition()) {
						ctrack.draw(overlay);
					}
					var cp = ctrack.getCurrentParameters();
					var er = ec.meanPredict(cp);
					if (er) {
            er.filter(function (e) {
              if(e.emotion == 'happy'){
                if(maxParameterResult){
                  if(midParameterResult){
                    if(e.value <= 0.1){
                        if(capturedDone == false){
                          capturedDone = true;
                          capture();
                        }
                    } else {
                      instruction.innerHTML = "Jangan senyum...";
                    }
                      // if(e.value >= (lowParameter / 2) && e.value < lowParameter){
                      //   instruction.innerHTML = "Tambah Senyum lagi...";
                      // } else if(e.value >= lowParameter && e.value < (lowParameter + 0.1)){

                      //   instruction.innerHTML = "Ok";
                      //   lowParameterResult = true
                      // } else if(e.value >= 0 && e.value < 0.1) {
                      //   instruction.innerHTML = "Silahkan senyum...";
                      // } else if (e.value >= 0.1){
                      //   instruction.innerHTML = "Jangan senyum...";
                      // }
                  } else {
                      if(e.value >= (midParameter / 2) && e.value < midParameter){
                        instruction.innerHTML = "Tambah Senyum lagi...";
                      } else if(e.value >= midParameter && e.value < (midParameter + 0.1)){
                        console.log("MID : " + midParameter)
                        console.log("ACTUAL : " + e.value)
                        instruction.innerHTML = "Ok";
                        midParameterResult = true
                        console.log("OKE MID")
                      } else if(e.value >= 0 && e.value < 0.1) {
                        instruction.innerHTML = "Silahkan senyum...";
                      } else if (e.value >= (midParameter + 0.1)){
                        instruction.innerHTML = "Turunkan senyum...";
                      }
                  }
                } else {

                    if(e.value >= (maxParameter / 2) && e.value < maxParameter){
                      instruction.innerHTML = "Tambah Senyum lagi...";
                    } else if( e.value >= maxParameter){
                       console.log("MAX : " + maxParameter)
                    console.log("ACTUAL : " + e.value)
                      instruction.innerHTML = "Ok";
                      maxParameterResult = true
                      console.log("OKE MAX")
                    } else if(e.value >= 0 && e.value < 0.1) {
                      instruction.innerHTML = "Silahkan senyum...";
                    }
                }
              }
              // if(e.emotion == 'happy' && e.value >= (maxParameter / 2) && e.value < maxParameter){
              //   instruction.innerHTML = "Tambah Senyum lagi...";
              // } else if(e.emotion == 'happy' && e.value >= maxParameter){

              //   instruction.innerHTML = "Ok";
              //   if(capturedDone == false){
              //     capturedDone = true;
              //     capture();
              //   }
              // } else if(e.emotion == 'happy' && e.value >= 0 && e.value < 0.1) {
              //   instruction.innerHTML = "Silahkan senyum...";
              // }
            });

						// updateData(er);
						// for (var i = 0;i < er.length;i++) {
						// 	if (er[i].value > 0.4) {
						// 		document.getElementById('icon'+(i+1)).style.visibility = 'visible';
						// 	} else {
						// 		document.getElementById('icon'+(i+1)).style.visibility = 'hidden';
						// 	}
						// }
					}
				}

				delete emotionModel['disgusted'];
				delete emotionModel['fear'];
				var ec = new emotionClassifier();
				ec.init(emotionModel);
				var emotionData = ec.getBlank();

				/************ d3 code for barchart *****************/

				// var margin = {top : 20, right : 20, bottom : 10, left : 40},
				// 	width = 400 - margin.left - margin.right,
				// 	height = 100 - margin.top - margin.bottom;

				// var barWidth = 30;

				// var formatPercent = d3.format(".0%");

				// var x = d3.scale.linear()
				// 	.domain([0, ec.getEmotions().length]).range([margin.left, width+margin.left]);

				// var y = d3.scale.linear()
				// 	.domain([0,1]).range([0, height]);

				// var svg = d3.select("#emotion_chart").append("svg")
				// 	.attr("width", width + margin.left + margin.right)
				// 	.attr("height", height + margin.top + margin.bottom)

				// svg.selectAll("rect").
				// 	data(emotionData).
				// 	enter().
				// 	append("svg:rect").
				// 	attr("x", function(datum, index) { return x(index); }).
				// 	attr("y", function(datum) { return height - y(datum.value); }).
				// 	attr("height", function(datum) { return y(datum.value); }).
				// 	attr("width", barWidth).
				// 	attr("fill", "#2d578b");

				// svg.selectAll("text.labels").
				// 	data(emotionData).
				// 	enter().
				// 	append("svg:text").
				// 	attr("x", function(datum, index) { return x(index) + barWidth; }).
				// 	attr("y", function(datum) { return height - y(datum.value); }).
				// 	attr("dx", -barWidth/2).
				// 	attr("dy", "1.2em").
				// 	attr("text-anchor", "middle").
				// 	text(function(datum) { return datum.value;}).
				// 	attr("fill", "white").
				// 	attr("class", "labels");

				// svg.selectAll("text.yAxis").
				// 	data(emotionData).
				// 	enter().append("svg:text").
				// 	attr("x", function(datum, index) { return x(index) + barWidth; }).
				// 	attr("y", height).
				// 	attr("dx", -barWidth/2).
				// 	attr("text-anchor", "middle").
				// 	attr("style", "font-size: 12").
				// 	text(function(datum) { return datum.emotion;}).
				// 	attr("transform", "translate(0, 18)").
				// 	attr("class", "yAxis");

				// function updateData(data) {
				// 	// update
				// 	var rects = svg.selectAll("rect")
				// 		.data(data)
				// 		.attr("y", function(datum) { return height - y(datum.value); })
				// 		.attr("height", function(datum) { return y(datum.value); });
				// 	var texts = svg.selectAll("text.labels")
				// 		.data(data)
				// 		.attr("y", function(datum) { return height - y(datum.value); })
				// 		.text(function(datum) {  return datum.value.toFixed(2)});

				// 	// enter
				// 	rects.enter().append("svg:rect");
				// 	texts.enter().append("svg:text");

				// 	// exit
				// 	rects.exit().remove();
				// 	texts.exit().remove();
				// }

				/******** stats ********/

				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.top = '0px';
				document.getElementById('container').appendChild( stats.domElement );

				// update stats on every iteration
				document.addEventListener('clmtrackrIteration', function(event) {
					stats.update();
				}, false);
  </script>
</body>

</html>
